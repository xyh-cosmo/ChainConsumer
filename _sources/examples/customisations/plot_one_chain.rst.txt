

.. _sphx_glr_examples_customisations_plot_one_chain.py:


=========
One Chain
=========

Plot one chain with parameter names.

Because we are only plotting one chain, we will get
parameter bounds on the marginalised surfaces by
default.




.. image:: /examples/customisations/images/sphx_glr_plot_one_chain_001.png
    :align: center





.. code-block:: python


    import numpy as np
    from numpy.random import normal, multivariate_normal
    from chainconsumer import ChainConsumer


    if __name__ == "__main__":
        np.random.seed(0)
        cov = 1e2 * normal(size=(3, 3))
        data = multivariate_normal(1e3 * normal(size=3), 0.5 * (cov + cov.T), size=100000)

        # If you pass in parameter labels and only one chain, you can also get parameter bounds
        fig = ChainConsumer().add_chain(data, parameters=["$x$", "$y$", r"$\epsilon$"]).plotter.plot()

        fig.set_size_inches(4.5 + fig.get_size_inches())  # Resize fig for doco. You don't need this.

**Total running time of the script:** ( 0 minutes  1.984 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_one_chain.py <plot_one_chain.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_one_chain.ipynb <plot_one_chain.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
